-- You may have noticed that PostgreSQL sometimes returns the same request query result in a diffferent 
-- order. You can use ORDER BY to sort rows based on a column value, in either ascending or descending. 

-- Basic syntax for ORDER BY statement: 

--	SELECT column name 1, column name 2 
--  FROM table name 
--	ORDER BY column name ASC or DESC

-- Remember that ORDER BY is always stated at the end of the queary. You do all filtering and then use
-- ORDER BY to change the order. 

	SELECT * FROM customer;

-- try to use ORDER BY with ascending order 

	SELECT * FROM customer
	ORDER BY first_name ASC;
	
-- try to use ORDER BY with descending order 

	SELECT * FROM customer
	ORDER BY first_name DESC;
	
-- Order the store id and organize by first name

	SELECT * FROM customer
	ORDER BY store_id, first_name ASC;
	
-- You can also change the order individually 

	SELECT * FROM customer
	ORDER BY store_id DESC, first_name ASC;
--------------------------------------------------------------------------------------------------	
	
-- The LIMIT command allows us to limit the number of rows returned for a query. It is useful for
-- not wanting to return every single row in a table, but only view a top few rows in table or view  
-- few bottom rows of the table. LIMIT also become useful in combination with ORDER BY. 
-- Remember that LIMIT goes at the very end of query request and is the last command to be executed.

--	Check payment data
	SELECT * FROM payment;
	
-- let's try to use ORDER BY and LIMIT to see either oldest payment or the most recent payment

-- top 10 oldest payment
	SELECT * FROM payment
	ORDER BY payment_date ASC
	LIMIT 10;
	
-- top 10 recent payment 

	SELECT * FROM payment 
	ORDER BY payment_date DESC 
	LIMIT 10;
	
-- Let's add WHERE clause to create complex query. What is top 10 recent payment and amount that is
-- not equal to 0? 

	SELECT * FROM payment
	WHERE amount != 0.00
	ORDER BY payment_date DESC
	LIMIT 10;
	
------------------------------------------ Challenge ------------------------------------------------

-- Task 1: We want to reward first 10 paying customers. What are the customer ids of the first 10 
-- customers who created a payment?  

	SELECT customer_id FROM payment
	ORDER BY payment_date ASC
	LIMIT 10;
	
-- Tasks 2: A customer wants to quickly rent a video to watch over their lunch break. What are the 
-- title of the 5 shortest (in lnegth of time) movies? 

	SELECT title, length FROM film
	ORDER BY length ASC 
	LIMIT 5;
	
-- Bonus question: IF the previous customer can watch any movie that is 50 minutes or less in run 
-- time, how many options does it have? 

-- check film info
	
	SELECT * FROM film;
	
-- count the movie length that is 50 min or less 

	SELECT COUNT (length) FROM film
	WHERE length <= 50;
-- Ans: 37 movies

-- Solution 2- Display with movie title

	SELECT title, length FROM film 
	WHERE length <= 50;










	